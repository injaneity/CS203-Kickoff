name: Docker Build and Push for Microservices

on:
  push:
    branches:
      - main  # Trigger this action on pushes to the "main" branch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["users", "tournaments", "clubs"]

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Log in to Docker Hub using the credentials stored in GitHub Secrets
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 3: Set up Docker Buildx (for multi-platform builds, optional)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 4: Build and Push Docker images for the service with environment variables
    - name: Build and push Docker images for ${{ matrix.service }} service
      run: |
        docker build \
          --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
          -t ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest ./backend/${{ matrix.service }}

        docker tag ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:${{ github.sha }}
    
    # Step 5: Log out from Docker Hub
    - name: Log out from Docker Hub
      run: docker logout
  
    # Step 6: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 7: Check if ECS cluster exists
    - name: Check if ECS cluster exists
      id: check_cluster
      run: |
        if ! aws ecs describe-clusters --clusters ${{ matrix.service }}-cluster --query "clusters[0].status" --output text | grep -q 'ACTIVE'; then
          echo "Cluster ${{ matrix.service }}-kickoff does not exist or is not active. Skipping ECS deployment."
          echo "cluster_exists=false" >> $GITHUB_ENV
          exit 0  # Gracefully exit
        else
          echo "cluster_exists=true" >> $GITHUB_ENV
        fi

    # Step 8: Force ECS Redeployment for the service if the cluster exists
    - name: Force ECS redeployment for ${{ matrix.service }}
      if: env.cluster_exists == 'true'  # Only run if the cluster exists
      run: |
        aws ecs update-service \
          --cluster ${{ matrix.service }}-cluster \
          --service ${{ matrix.service }}-service \
          --force-new-deployment