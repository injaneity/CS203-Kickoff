name: Docker Build and Push for Microservices

on:
  push:
    branches:
      - main  # Trigger this action on pushes to the "main" branch
    paths:
        - 'backend/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ["users", "tournaments", "clubs", "chatbot"]

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Download files from S3 bucket to backend/chatbot/data/
    - name: Download data from S3 bucket
      if: matrix.service == 'chatbot'
      run: |
        mkdir -p backend/chatbot/data/
        aws s3 cp s3://${{ secrets.CHATBOT_DATA_S3_BUCKET }}/ backend/chatbot/data/ --recursive

    # Step 4: Set up Docker Buildx (for multi-platform builds, optional)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 5: Log in to Docker Hub using the credentials stored in GitHub Secrets
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 6: Build and Push Docker images for the service with environment variables
    - name: Build and push Docker images for ${{ matrix.service }} service
      run: |
        docker build \
          -t ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest ./backend/${{ matrix.service }}

        docker tag ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/kickoff-${{ matrix.service }}:${{ github.sha }}
    
    # Step 7: Log out from Docker Hub
    - name: Log out from Docker Hub
      run: docker logout

    # Step 8: Check if ECS service exists in the cluster
    - name: Check if ECS service exists
      id: check_service
      run: |
        service_status=$(aws ecs describe-services --cluster ${{ matrix.service }}-cluster --services ${{ matrix.service }}-service --query "services[0].status" --output text)
        if [[ "$service_status" != "ACTIVE" ]]; then
          echo "Service ${{ matrix.service }}-service does not exist in the cluster. Skipping ECS deployment."
          echo "service_exists=false" >> $GITHUB_ENV
          exit 0  # Gracefully exit
        else
          echo "service_exists=true" >> $GITHUB_ENV
        fi

    # Step 9: Force ECS Redeployment for the service if the cluster and service exist
    - name: Force ECS redeployment for ${{ matrix.service }}
      if: env.service_exists == 'true'  # Only run if both cluster and service exist
      run: |
        aws ecs update-service \
          --cluster ${{ matrix.service }}-cluster \
          --service ${{ matrix.service }}-service \
          --force-new-deployment